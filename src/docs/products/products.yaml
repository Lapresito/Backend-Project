paths:
  /api/products:
    get:
      parameters:
        - name: limit
          in: query
          description: Number of items to return per page (default is 4)
          schema:
            type: integer
        - name: page
          in: query
          description: Page number to retrieve (default is 1)
          schema:
            type: integer
        - name: query
          in: query
          description: Search query to filter products
          schema:
            type: string
        - name: sort
          in: query
          description: Sort order for products (asc or desc)
          schema:
            type: string
      summary: Get all products with queries
      tags:
        - Products
      responses:
        "200":
          description: Products were retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductResponse"
        "500":
          description: Server error, maybe a DB issue.
    post:
      summary: Upload a new product
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "200":
          description: Product was uploaded successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponse"
        "500":
          description: Server error, maybe a DB issue.
  /api/products/{pid}:
    get:
      summary: Get a product by ID
      tags:
        - Products
      parameters:
        - name: pid
          in: path
          required: true
          description: Product ID you are looking for
          schema:
            type: string
      responses:
        "200":
          description: Product found successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponse"
    put:
      summary: Update a product by ID
      tags:
        - Products
      parameters:
        - name: pid
          in: path
          required: true
          description: Product ID you are looking for
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "200":
          description: Product was updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponse"
    delete:
      summary: Delete a product by ID
      tags:
        - Products
      parameters:
        - name: pid
          in: path
          required: true
          description: Product ID to delete
          schema:
            type: string
      responses:
        "204":
          description: Product was deleted successfully
components:
  schemas:
    Success:
      type: object
      properties:
        status:
          type: string
          description: Response status (success or error)
        message:
          type: string
          description: Message details
      example:
        status: success
        message: Product was updated successfully

    Product:
      type: object
      properties:
        _id:
          type: string
          description: Auto-generated ID by Mongo
        title:
          type: string
          description: Product title
        description:
          type: string
          description: Product description
        price:
          type: number
          description: Product price
        thumbnail:
          type: string
          description: Product image URL
        code:
          type: string
          description: Unique product code
        stock:
          type: number
          description: Product stock
        status:
          type: boolean
          description: Product status (active or inactive)
        category:
          type: string
          description: Product category
        owner:
          type: string
          description: Owner's email

    ProductResponse:
      type: object
      properties:
        status:
          type: string
          description: Response status (success or error)
        message:
          type: string
          description: Message details
        product:
          $ref: "#/components/schemas/Product"
      example:
        status: success
        message: Product was updated successfully
        payload:
          _id: "644081a93f0625dc193bc594"
          title: Shoes
          description: Black shoes, size 39
          price: 300
          thumbnail: www.imgage.com/yourimage
          code: 1s182s12jlsid
          stock: 21
          status: true
          category: shoes
          owner: owner@email.com

  requestBodies:
    updateProduct:
      type: object
      properties:
        title:
          type: string
          description: Title
        description:
          type: string
          description: Description
        price:
          type: number
          description: Price
        thumbnail:
          type: string
          description: Image URL
        code:
          type: string
          description: Random code
        stock:
          type: number
          description: Stock
        category:
          type: string
          description: Category
      example:
        status: success
        message: Product was updated successfully
        payload:
          title: Socks
          description: White fluffy socks
          price: 20
          thumbnail: www.image.com/fluffysocks
          code: randomcode2312sds8d712
          stock: 145
          category: clothes